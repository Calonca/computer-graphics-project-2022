#version 450#extension GL_ARB_separate_shader_objects : enablelayout(location = 0) in vec3 fragPos;layout(location = 1) in vec3 fragNorm;layout(location = 2) in vec2 fragTexCoord;layout(location = 0) out vec4 outColor;layout(binding = 1) uniform sampler2D texSampler;layout(binding = 2) uniform GlobalUniformBufferObject {	vec3 lightDir;	vec4 lightColor;	vec3 eyePos;} gubo;float rand(vec2 n) { 	return fract(sin(dot(n, vec2(12.9898, 4.1414))) * 43758.5453);}float noise(vec2 p){	vec2 ip = floor(p);	vec2 u = fract(p);	u = u*u*(3.0-2.0*u);		float res = mix(		mix(rand(ip),rand(ip+vec2(1.0,0.0)),u.x),		mix(rand(ip+vec2(0.0,1.0)),rand(ip+vec2(1.0,1.0)),u.x),u.y);	return res*res;}float smoothNoise(vec2 p){	float total = 0.0;	float freq = 1.0;	float ampl = 1.0;	float maxVal = 0.0;	for (int i = 0; i < 6; i++) {		total += noise(p * freq) * ampl;		maxVal += ampl;		ampl *= 0.5;		freq *= 2.0;	}	return total / maxVal;}float rayMarchShadows(vec3 ro, vec3 rd, float mint, float maxt, vec3 normal) {	// offset ro.y by a small epsilon to handle shadow acne	float epsilon = 0.025;	ro = ro + normal * epsilon;	float originalH = ro.y;	for(float t = mint; t < maxt;) {		// travel along rd by t		vec3 newPos = ro + t * rd;		float newH = 1.0 + smoothNoise(newPos.xz * 0.125) * 6.0;		if(newH > newPos.y) {			return 0.1;		}		if(t < 5.0 * mint) {			t += mint;		} else {			t += 2.0;		}		}	return 1.0;}void main() {	vec3 Norm =normalize(fragNorm);	vec3 EyeDir = normalize(gubo.eyePos - fragPos);		float occ = rayMarchShadows(fragPos, normalize(gubo.lightDir), 0.1, 30, Norm);	vec3 Diffuse;// = 1.1f * texture(texSampler, fragTexCoord).rgb * (max(dot(Norm, gubo.lightDir),0.0f) * 0.9f + 0.1f);	//outColor = vec4((Diffuse + Specular) * gubo.lightColor.rgb, 1.0f);	float AmbientFact = 0.1f;	vec3 Ambient = occ*vec3(1,1,1)*AmbientFact;	if(fragPos.y>2.8-5){		Diffuse = 1.1f * texture(texSampler, fragTexCoord).rgb * (max(dot(Norm, gubo.lightDir),0.0f) * 0.9f + 0.1f);		Diffuse *= vec3(0.98,0.2,0)*2;	} else {		Diffuse = 1.1f * texture(texSampler, fragTexCoord).rgb * (max(dot(Norm, gubo.lightDir),0.0f) * 0.9f + 0.1f);	}	vec3 Specular = vec3(pow(max(dot(EyeDir, -reflect(gubo.lightDir, Norm)),0.0f), 64.0f));		outColor =vec4((Diffuse + Specular) * gubo.lightColor.rgb, 1.0f);	//outColor = vec4(0,fragPos.y/3.8f,0,1);//	outColor = vec4(texture(texSampler, fragTexCoord).rgb * gubo.lightColor.rgb * (max(dot(Norm, gubo.lightDir),0.0f) * 0.9f + 0.1f), 1.0f);//	outColor = vec4(texture(texSampler, fragTexCoord).rgb * (max(dot(Norm, gubo.lightDir),0.0f) * 0.9f + 0.1f), 1.0f);//	outColor = vec4(vec3(max(dot(Norm, gubo.lightDir),0.0f) * 0.85f + 0.15f), 1.0f);//	outColor = vec4(10.0f,1.0f,0.0f,0.0f);}